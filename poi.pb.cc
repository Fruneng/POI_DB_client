// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "poi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace poi {

namespace {

const ::google::protobuf::Descriptor* Gps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gps_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clouds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clouds_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mstreet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mstreet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mark_reflection_ = NULL;
const ::google::protobuf::Descriptor* Customer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Customer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Customer_Rsource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Customer_Rsource_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_poi_2eproto() {
  protobuf_AddDesc_poi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "poi.proto");
  GOOGLE_CHECK(file != NULL);
  Gps_descriptor_ = file->message_type(0);
  static const int Gps_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, time_),
  };
  Gps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gps_descriptor_,
      Gps::default_instance_,
      Gps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gps));
  Clouds_descriptor_ = file->message_type(1);
  static const int Clouds_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clouds, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clouds, username_),
  };
  Clouds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clouds_descriptor_,
      Clouds::default_instance_,
      Clouds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clouds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clouds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clouds));
  Mstreet_descriptor_ = file->message_type(2);
  static const int Mstreet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, level_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, onewany_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, zoomlayer_),
  };
  Mstreet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mstreet_descriptor_,
      Mstreet::default_instance_,
      Mstreet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mstreet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mstreet));
  Mark_descriptor_ = file->message_type(3);
  static const int Mark_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, memo_),
  };
  Mark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mark_descriptor_,
      Mark::default_instance_,
      Mark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mark));
  Customer_descriptor_ = file->message_type(4);
  static const int Customer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, picname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, memo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, res_),
  };
  Customer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Customer_descriptor_,
      Customer::default_instance_,
      Customer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Customer));
  Customer_Rsource_descriptor_ = Customer_descriptor_->nested_type(0);
  static const int Customer_Rsource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer_Rsource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer_Rsource, url_),
  };
  Customer_Rsource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Customer_Rsource_descriptor_,
      Customer_Rsource::default_instance_,
      Customer_Rsource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer_Rsource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer_Rsource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Customer_Rsource));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_poi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gps_descriptor_, &Gps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clouds_descriptor_, &Clouds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mstreet_descriptor_, &Mstreet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mark_descriptor_, &Mark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Customer_descriptor_, &Customer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Customer_Rsource_descriptor_, &Customer_Rsource::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_poi_2eproto() {
  delete Gps::default_instance_;
  delete Gps_reflection_;
  delete Clouds::default_instance_;
  delete Clouds_reflection_;
  delete Mstreet::default_instance_;
  delete Mstreet_reflection_;
  delete Mark::default_instance_;
  delete Mark_reflection_;
  delete Customer::default_instance_;
  delete Customer_reflection_;
  delete Customer_Rsource::default_instance_;
  delete Customer_Rsource_reflection_;
}

void protobuf_AddDesc_poi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpoi.proto\022\003poi\"n\n\003Gps\022\013\n\003lng\030\001 \002(\001\022\013\n\003"
    "lat\030\002 \002(\001\022\016\n\006height\030\003 \001(\001\022\r\n\005speed\030\004 \001(\005"
    "\022\021\n\tdirection\030\005 \001(\005\022\r\n\005color\030\006 \001(\005\022\014\n\004ti"
    "me\030\007 \001(\005\"1\n\006Clouds\022\025\n\003gps\030\001 \002(\0132\010.poi.Gp"
    "s\022\020\n\010username\030\002 \002(\t\"\212\001\n\007Mstreet\022\025\n\003gps\030\001"
    " \002(\0132\010.poi.Gps\022\n\n\002id\030\002 \002(\005\022\020\n\010username\030\003"
    " \002(\t\022\024\n\014level_height\030\004 \002(\005\022\014\n\004city\030\005 \002(\t"
    "\022\023\n\013onewany_dir\030\006 \002(\005\022\021\n\tzoomlayer\030\007 \002(\005"
    "\"E\n\004Mark\022\025\n\003gps\030\001 \002(\0132\010.poi.Gps\022\n\n\002id\030\002 "
    "\002(\005\022\014\n\004type\030\003 \002(\005\022\014\n\004memo\030\004 \001(\t\"\234\001\n\010Cust"
    "omer\022\025\n\003gps\030\001 \002(\0132\010.poi.Gps\022\017\n\007picname\030\002"
    " \002(\t\022\020\n\010username\030\003 \002(\t\022\014\n\004memo\030\004 \001(\t\022\"\n\003"
    "res\030\005 \001(\0132\025.poi.Customer.Rsource\032$\n\007Rsou"
    "rce\022\014\n\004type\030\001 \002(\005\022\013\n\003url\030\002 \002(\t", 550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "poi.proto", &protobuf_RegisterTypes);
  Gps::default_instance_ = new Gps();
  Clouds::default_instance_ = new Clouds();
  Mstreet::default_instance_ = new Mstreet();
  Mark::default_instance_ = new Mark();
  Customer::default_instance_ = new Customer();
  Customer_Rsource::default_instance_ = new Customer_Rsource();
  Gps::default_instance_->InitAsDefaultInstance();
  Clouds::default_instance_->InitAsDefaultInstance();
  Mstreet::default_instance_->InitAsDefaultInstance();
  Mark::default_instance_->InitAsDefaultInstance();
  Customer::default_instance_->InitAsDefaultInstance();
  Customer_Rsource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_poi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_poi_2eproto {
  StaticDescriptorInitializer_poi_2eproto() {
    protobuf_AddDesc_poi_2eproto();
  }
} static_descriptor_initializer_poi_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Gps::kLngFieldNumber;
const int Gps::kLatFieldNumber;
const int Gps::kHeightFieldNumber;
const int Gps::kSpeedFieldNumber;
const int Gps::kDirectionFieldNumber;
const int Gps::kColorFieldNumber;
const int Gps::kTimeFieldNumber;
#endif  // !_MSC_VER

Gps::Gps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gps::InitAsDefaultInstance() {
}

Gps::Gps(const Gps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gps::SharedCtor() {
  _cached_size_ = 0;
  lng_ = 0;
  lat_ = 0;
  height_ = 0;
  speed_ = 0;
  direction_ = 0;
  color_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gps::~Gps() {
  SharedDtor();
}

void Gps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gps_descriptor_;
}

const Gps& Gps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Gps* Gps::default_instance_ = NULL;

Gps* Gps::New() const {
  return new Gps;
}

void Gps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lng_ = 0;
    lat_ = 0;
    height_ = 0;
    speed_ = 0;
    direction_ = 0;
    color_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lng = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_height;
        break;
      }

      // optional double height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // optional int32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional int32 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional int32 color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double lng = 1;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // optional int32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  // optional int32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->color(), output);
  }

  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double lng = 1;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // optional int32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }

  // optional int32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  // optional int32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->color(), target);
  }

  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lng = 1;
    if (has_lng()) {
      total_size += 1 + 8;
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional int32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gps::MergeFrom(const Gps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gps::CopyFrom(const Gps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gps::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gps::Swap(Gps* other) {
  if (other != this) {
    std::swap(lng_, other->lng_);
    std::swap(lat_, other->lat_);
    std::swap(height_, other->height_);
    std::swap(speed_, other->speed_);
    std::swap(direction_, other->direction_);
    std::swap(color_, other->color_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gps_descriptor_;
  metadata.reflection = Gps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clouds::kGpsFieldNumber;
const int Clouds::kUsernameFieldNumber;
#endif  // !_MSC_VER

Clouds::Clouds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clouds::InitAsDefaultInstance() {
  gps_ = const_cast< ::poi::Gps*>(&::poi::Gps::default_instance());
}

Clouds::Clouds(const Clouds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clouds::SharedCtor() {
  _cached_size_ = 0;
  gps_ = NULL;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clouds::~Clouds() {
  SharedDtor();
}

void Clouds::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
    delete gps_;
  }
}

void Clouds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clouds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clouds_descriptor_;
}

const Clouds& Clouds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Clouds* Clouds::default_instance_ = NULL;

Clouds* Clouds::New() const {
  return new Clouds;
}

void Clouds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::poi::Gps::Clear();
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clouds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .poi.Gps gps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clouds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clouds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clouds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .poi.Gps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clouds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clouds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clouds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clouds::MergeFrom(const Clouds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::poi::Gps::MergeFrom(from.gps());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clouds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clouds::CopyFrom(const Clouds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clouds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  return true;
}

void Clouds::Swap(Clouds* other) {
  if (other != this) {
    std::swap(gps_, other->gps_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clouds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clouds_descriptor_;
  metadata.reflection = Clouds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mstreet::kGpsFieldNumber;
const int Mstreet::kIdFieldNumber;
const int Mstreet::kUsernameFieldNumber;
const int Mstreet::kLevelHeightFieldNumber;
const int Mstreet::kCityFieldNumber;
const int Mstreet::kOnewanyDirFieldNumber;
const int Mstreet::kZoomlayerFieldNumber;
#endif  // !_MSC_VER

Mstreet::Mstreet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mstreet::InitAsDefaultInstance() {
  gps_ = const_cast< ::poi::Gps*>(&::poi::Gps::default_instance());
}

Mstreet::Mstreet(const Mstreet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mstreet::SharedCtor() {
  _cached_size_ = 0;
  gps_ = NULL;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_height_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onewany_dir_ = 0;
  zoomlayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mstreet::~Mstreet() {
  SharedDtor();
}

void Mstreet::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
    delete gps_;
  }
}

void Mstreet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mstreet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mstreet_descriptor_;
}

const Mstreet& Mstreet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Mstreet* Mstreet::default_instance_ = NULL;

Mstreet* Mstreet::New() const {
  return new Mstreet;
}

void Mstreet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::poi::Gps::Clear();
    }
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    level_height_ = 0;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    onewany_dir_ = 0;
    zoomlayer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mstreet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .poi.Gps gps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // required string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_height;
        break;
      }

      // required int32 level_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_height_)));
          set_has_level_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // required string city = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_onewany_dir;
        break;
      }

      // required int32 onewany_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onewany_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onewany_dir_)));
          set_has_onewany_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zoomlayer;
        break;
      }

      // required int32 zoomlayer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoomlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoomlayer_)));
          set_has_zoomlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mstreet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }

  // required int32 level_height = 4;
  if (has_level_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level_height(), output);
  }

  // required string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->city(), output);
  }

  // required int32 onewany_dir = 6;
  if (has_onewany_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->onewany_dir(), output);
  }

  // required int32 zoomlayer = 7;
  if (has_zoomlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->zoomlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mstreet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // required int32 level_height = 4;
  if (has_level_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level_height(), target);
  }

  // required string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // required int32 onewany_dir = 6;
  if (has_onewany_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->onewany_dir(), target);
  }

  // required int32 zoomlayer = 7;
  if (has_zoomlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->zoomlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mstreet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .poi.Gps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 level_height = 4;
    if (has_level_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_height());
    }

    // required string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // required int32 onewany_dir = 6;
    if (has_onewany_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onewany_dir());
    }

    // required int32 zoomlayer = 7;
    if (has_zoomlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoomlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mstreet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mstreet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mstreet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mstreet::MergeFrom(const Mstreet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::poi::Gps::MergeFrom(from.gps());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_level_height()) {
      set_level_height(from.level_height());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_onewany_dir()) {
      set_onewany_dir(from.onewany_dir());
    }
    if (from.has_zoomlayer()) {
      set_zoomlayer(from.zoomlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mstreet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mstreet::CopyFrom(const Mstreet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mstreet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  return true;
}

void Mstreet::Swap(Mstreet* other) {
  if (other != this) {
    std::swap(gps_, other->gps_);
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(level_height_, other->level_height_);
    std::swap(city_, other->city_);
    std::swap(onewany_dir_, other->onewany_dir_);
    std::swap(zoomlayer_, other->zoomlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mstreet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mstreet_descriptor_;
  metadata.reflection = Mstreet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mark::kGpsFieldNumber;
const int Mark::kIdFieldNumber;
const int Mark::kTypeFieldNumber;
const int Mark::kMemoFieldNumber;
#endif  // !_MSC_VER

Mark::Mark()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mark::InitAsDefaultInstance() {
  gps_ = const_cast< ::poi::Gps*>(&::poi::Gps::default_instance());
}

Mark::Mark(const Mark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mark::SharedCtor() {
  _cached_size_ = 0;
  gps_ = NULL;
  id_ = 0;
  type_ = 0;
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mark::~Mark() {
  SharedDtor();
}

void Mark::SharedDtor() {
  if (memo_ != &::google::protobuf::internal::kEmptyString) {
    delete memo_;
  }
  if (this != default_instance_) {
    delete gps_;
  }
}

void Mark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mark_descriptor_;
}

const Mark& Mark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Mark* Mark::default_instance_ = NULL;

Mark* Mark::New() const {
  return new Mark;
}

void Mark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::poi::Gps::Clear();
    }
    id_ = 0;
    type_ = 0;
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::kEmptyString) {
        memo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .poi.Gps gps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memo;
        break;
      }

      // optional string memo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string memo = 4;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->memo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string memo = 4;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .poi.Gps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string memo = 4;
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mark::MergeFrom(const Mark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::poi::Gps::MergeFrom(from.gps());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mark::CopyFrom(const Mark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  return true;
}

void Mark::Swap(Mark* other) {
  if (other != this) {
    std::swap(gps_, other->gps_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(memo_, other->memo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mark_descriptor_;
  metadata.reflection = Mark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Customer_Rsource::kTypeFieldNumber;
const int Customer_Rsource::kUrlFieldNumber;
#endif  // !_MSC_VER

Customer_Rsource::Customer_Rsource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Customer_Rsource::InitAsDefaultInstance() {
}

Customer_Rsource::Customer_Rsource(const Customer_Rsource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Customer_Rsource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Customer_Rsource::~Customer_Rsource() {
  SharedDtor();
}

void Customer_Rsource::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Customer_Rsource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Customer_Rsource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Customer_Rsource_descriptor_;
}

const Customer_Rsource& Customer_Rsource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Customer_Rsource* Customer_Rsource::default_instance_ = NULL;

Customer_Rsource* Customer_Rsource::New() const {
  return new Customer_Rsource;
}

void Customer_Rsource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Customer_Rsource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Customer_Rsource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Customer_Rsource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Customer_Rsource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Customer_Rsource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Customer_Rsource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Customer_Rsource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Customer_Rsource::MergeFrom(const Customer_Rsource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Customer_Rsource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Customer_Rsource::CopyFrom(const Customer_Rsource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Customer_Rsource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Customer_Rsource::Swap(Customer_Rsource* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Customer_Rsource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Customer_Rsource_descriptor_;
  metadata.reflection = Customer_Rsource_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Customer::kGpsFieldNumber;
const int Customer::kPicnameFieldNumber;
const int Customer::kUsernameFieldNumber;
const int Customer::kMemoFieldNumber;
const int Customer::kResFieldNumber;
#endif  // !_MSC_VER

Customer::Customer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Customer::InitAsDefaultInstance() {
  gps_ = const_cast< ::poi::Gps*>(&::poi::Gps::default_instance());
  res_ = const_cast< ::poi::Customer_Rsource*>(&::poi::Customer_Rsource::default_instance());
}

Customer::Customer(const Customer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Customer::SharedCtor() {
  _cached_size_ = 0;
  gps_ = NULL;
  picname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Customer::~Customer() {
  SharedDtor();
}

void Customer::SharedDtor() {
  if (picname_ != &::google::protobuf::internal::kEmptyString) {
    delete picname_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (memo_ != &::google::protobuf::internal::kEmptyString) {
    delete memo_;
  }
  if (this != default_instance_) {
    delete gps_;
    delete res_;
  }
}

void Customer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Customer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Customer_descriptor_;
}

const Customer& Customer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_poi_2eproto();
  return *default_instance_;
}

Customer* Customer::default_instance_ = NULL;

Customer* Customer::New() const {
  return new Customer;
}

void Customer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gps()) {
      if (gps_ != NULL) gps_->::poi::Gps::Clear();
    }
    if (has_picname()) {
      if (picname_ != &::google::protobuf::internal::kEmptyString) {
        picname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::kEmptyString) {
        memo_->clear();
      }
    }
    if (has_res()) {
      if (res_ != NULL) res_->::poi::Customer_Rsource::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Customer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .poi.Gps gps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_picname;
        break;
      }

      // required string picname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picname().data(), this->picname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // required string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memo;
        break;
      }

      // optional string memo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_res;
        break;
      }

      // optional .poi.Customer.Rsource res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Customer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps(), output);
  }

  // required string picname = 2;
  if (has_picname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picname().data(), this->picname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->picname(), output);
  }

  // required string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }

  // optional string memo = 4;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->memo(), output);
  }

  // optional .poi.Customer.Rsource res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Customer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .poi.Gps gps = 1;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps(), target);
  }

  // required string picname = 2;
  if (has_picname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picname().data(), this->picname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->picname(), target);
  }

  // required string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string memo = 4;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memo(), target);
  }

  // optional .poi.Customer.Rsource res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Customer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .poi.Gps gps = 1;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

    // required string picname = 2;
    if (has_picname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picname());
    }

    // required string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string memo = 4;
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional .poi.Customer.Rsource res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Customer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Customer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Customer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Customer::MergeFrom(const Customer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps()) {
      mutable_gps()->::poi::Gps::MergeFrom(from.gps());
    }
    if (from.has_picname()) {
      set_picname(from.picname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
    if (from.has_res()) {
      mutable_res()->::poi::Customer_Rsource::MergeFrom(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Customer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Customer::CopyFrom(const Customer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Customer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gps()) {
    if (!this->gps().IsInitialized()) return false;
  }
  if (has_res()) {
    if (!this->res().IsInitialized()) return false;
  }
  return true;
}

void Customer::Swap(Customer* other) {
  if (other != this) {
    std::swap(gps_, other->gps_);
    std::swap(picname_, other->picname_);
    std::swap(username_, other->username_);
    std::swap(memo_, other->memo_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Customer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Customer_descriptor_;
  metadata.reflection = Customer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace poi

// @@protoc_insertion_point(global_scope)
